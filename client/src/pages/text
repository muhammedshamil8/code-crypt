<template>
  <div class="signup-container">
    <form @submit.prevent="registerUser" class="signup-form">
      <h2>Sign Up for Free</h2>

      <div class="form-group">
        <label for="username">Username:</label>
        <input type="text" id="username" v-model="formData.username" required />
      </div>
      
      <div class="form-group">
        <label for="email">Email:</label>
        <input type="email" id="email" v-model="formData.email" required />
      </div>

      <div class="form-group">
        <label for="password">Password:</label>
        <input type="password" id="password" v-model="formData.password" required />
      </div>

      <div class="form-group">
        <label for="passwordConfirm">Confirm Password:</label>
        <input type="password" id="passwordConfirm" v-model="formData.passwordConfirm" required />
      </div>

      <button type="submit">Sign Up</button>
      <p class="p">Already have an account? <router-link to="/login" class="link">Login</router-link></p>
      <p v-if="error" class="error-message">{{ error }}</p>
    </form>
  </div>
</template>

<script>
import InputField from '../components/viewTools/InputFields.vue';
export default {
  data() {
    return {
      formData: {
        username: '',
        email: '',
        password: '',
        passwordConfirm: '',
      },
      isLoading: false,
      registrationMessage: '',
    };
  },
  methods: {
  async registerUser() {
    try {
      this.isLoading = true;
      const response = await fetch('http://localhost:9000/api/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          username: this.formData.username,
          email: this.formData.email,
          password: this.formData.password,
          passwordConfirm: this.formData.passwordConfirm,
        }),
      });

      const data = await response.json();

      if (data.status === 1) {
        this.registrationMessage = 'Registration successful!';
        alert('Registration successful!')
        setTimeout(() => {
          this.$router.push('/login');
        }, 3000);
      } else {
        this.registrationMessage = `${data.message}`;
      }
    } catch (error) {
      // Change 'this.message' to 'this.registrationMessage'
      this.registrationMessage = 'Signup failed: ' + error.message;
      console.error('Error:', error);
      this.registrationMessage = 'An error occurred during registration. Please try again.';
    } finally {
      this.isLoading = false;
    }
  },
},

};
</script>

<style>
    /* Global styles */
    .body {
      background-color: black;
      height: 100vh;
      margin: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      font-family: 'Inter', sans-serif;
    }
    .signup-container{
      background-color: black;
      height: 100vh;
      margin: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      font-family: 'Inter', sans-serif;
    }
    /* Styling for the full-frame container */
    .full-frame {
      width: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      background-color: #000000; /* Lighter gray background */
    }
    .p{
      color: #ffffff;
      margin: 3px;
      margin-top: 10px;
    }
    .link{
      color: rgb(14, 82, 172);
    }
    .signup-form {
      width: 340px;
      padding: 20px;
      border-radius: 8px;
      background-color: #312c2c; /* White background */
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    
    h2 {
      text-align: center;
      color: #ffffff; /* Dark gray text */
    }
    
    .form-group {
      margin-bottom: 15px;
    }
    
    label {
      display: block;
      margin-top: 10px;
      color: #ffffff; /* Dark gray text */
    }
    
    input {
      width: 100%;
      padding: 8px;
      margin-top: 5px;
      margin-bottom: 10px;
      box-sizing: border-box;
    }
    
    /* Styling for the login button */
    button {
      width: 100%;
      padding: 10px;
      background-color: #3498db; /* Blue button color */
      color: #ffffff; /* White text */
      border: none;
      cursor: pointer;
    }
    
    button:hover {
      background-color: #0056b3; /* Darker blue on hover */
    }
    
    .error-message {
      color: #e74c3c; /* Red error text */
      margin-top: 10px;
      text-align: center;
      font-size: 12px;
    }
    
    .create-account a {
      color: rgb(0, 140, 255);
      text-decoration: none;
      font-size: 12px;
    }
    
    .create-account a:hover {
      text-decoration: underline;
    }
    
    /* Mobile responsiveness */
    @media screen and (max-width: 600px) {
      .signup-page {
        padding: 10px; /* Adjust padding for smaller screens */
        width: 90%; /* Adjust width for smaller screens */
      }
    
      .form-group input {
        width: calc(100% - 30px);
        max-width: calc(100% - 30px);
        margin: 0;
      }
    
      .forgot-password,
      .create-account {
        margin-top: 10px;
      }
    }
    </style>
    


    <!-- login -->

    <template>
  <div class="body">
    <div class="full-frame">
      <div class="login-page">
        <h2>Login into your account</h2>
        <p class="message" :class="{ 'success-message': isSuccess, 'error-message': !isSuccess }">
          {{ message }}
        </p>

        <form @submit.prevent="login">
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" v-model="email" required :disabled="isLoading" />
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" v-model="password" required :disabled="isLoading" />
          </div>
      
          <div class="form-group-button">
           
            <button type="submit" :disabled="isLoading" class="button">
              {{ isLoading ? 'Logging in...' : 'Log in' }}
            </button>
          </div>
          <div class="forgot-password">
              <a href="#">Forgot Password?</a>
            </div><br />
        </form>
        <div class="create-account">
          <p>Need an account? <router-link to="/signup">Sign up</router-link></p>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  data() {
    return {
      email: '',
      password: '',
      message: '',
      isSuccess: false,
      isLoading: false,
    };
  },
  methods: {
    async login() {
      try {
        this.isLoading = true;
        const response = await axios.post('http://localhost:9000/api/login', {
          email: this.email,
          password: this.password,
        });

        if (response.data.status === 1) {
          this.isSuccess = true;
          this.message = 'Login successful. Redirecting...';

          localStorage.setItem('user_id', response.data.userId);
          setTimeout(() => {
            this.$router.push('/dashboard');
          }, 1500);
        } else {
          this.message = 'Login failed. Wrong credentials.';
          this.isSuccess = false;
        }
      } catch (error) {
        console.error('Error:', error);
        this.message = 'An error occurred. Please try again.';
        this.isSuccess = false;
      } finally {
        this.email = '';
        this.password = '';
        this.isLoading = false;
        setTimeout(() => {
          this.message = '';
        }, 5000);
      }
    },
  },
};
</script>

<style scoped>
.body {
  background-color: #000000;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}

.login-page {
  background-color: #292626;
  border-radius: 8px;
  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
  padding: 20px;
  width: 300px;
  text-align: center;
}

h2 {
  color: #ffffff;
  font-size: 24px;
  margin-bottom: 20px;
}

.message {
  font-size: 14px;
  margin: 10px 0;
}

.success-message {
  color: #4caf50;
}

.error-message {
  color: #f44336;
}

.form-group {
  margin-bottom: 15px;
  text-align: left;
}

label {
  display: block;
  margin-bottom: 5px;
  font-size: 14px;
  color: #ffffff;
}

input {
  width: 100%;
  height: 40px;
  border: 1px solid #ccc;
  border-radius: 4px;
  padding: 8px;
  box-sizing: border-box;
  font-size: 14px;
}

.form-group-button {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.forgot-password a {
  color: #007bff;
  text-decoration: none;
  font-size: 14px;
}

.button {
  width: 100%;
  padding: 10px;
  background-color: #007bff;
  border: none;
  border-radius: 4px;
  color: #fff;
  cursor: pointer;
  transition: background-color 0.3s;
}

.button:hover {
  background-color: #0056b3;
}

.create-account {
  margin-top: 15px;
  font-size: 14px;
  color: #ffffff;
}

.create-account a {
  color: #007bff;
  text-decoration: none;
  font-size: 14px;
}

.create-account a:hover {
  text-decoration: underline;
}
</style>
